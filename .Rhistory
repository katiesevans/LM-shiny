geno <- cbind(geno, cross$geno$V)
geno <- cbind(geno, cross$geno$X)
geno <- geno %>%
dplyr::select(which(colnames(.) %in% uniquemarkers)) %>%
data.frame(., pheno)
colnames(geno)[1:(ncol(geno) - 1)] <- sapply(colnames(geno)[1:(ncol(geno) -  1)],
function(marker) {paste(unlist(peaks[peaks$marker == gsub("\\.", "-", marker), c("chr", "pos")]), collapse = ":") })
colnames(geno)[ncol(geno)] <- "pheno"
split <- tidyr::gather(geno, marker, genotype, -pheno)
split$genotype <- sapply(split$genotype, function(x) {
if (is.na(x)) {
return(NA)
}
if (parent == "N2xCB4856") {
if (x == 1) {
"N2"
}
else {
"CB4856"
}
}
})
split$genotype <- factor(split$genotype, levels = c("N2", "CB4856", "LSJ2", "AF16", "HK104"))
split <- split %>%
tidyr::drop_na(genotype) %>%
dplyr::mutate(chr = (as.character(stringr::str_split_fixed(marker, ":", 2)[, 1])),
pos = as.numeric(as.character(stringr::str_split_fixed(marker, ":", 2)[, 2]))) %>%
dplyr::arrange(chr, pos)
split$marker <- factor(split$marker, levels = unique(split$marker))
ggplot2::ggplot(split) + ggplot2::scale_fill_manual(values = c(N2 = "orange", CB4856 = "blue", LSJ2 = "green", AF16 = "indianred", HK104 = "gold")) +
ggplot2::geom_jitter(ggplot2::aes(x = genotype, y = pheno), alpha = 0.8, size = 0.5, width = 0.1) +
ggplot2::geom_boxplot(ggplot2::aes(x = genotype, y = pheno, fill = genotype), outlier.shape = NA, alpha = 0.8) +
ggplot2::facet_wrap(~marker, ncol = 5) + ggplot2::theme_bw(tsize) +
ggplot2::theme(axis.text.x = ggplot2::element_text(face = "bold", color = "black"),
axis.text.y = ggplot2::element_text(face = "bold", color = "black"),
axis.title.x = ggplot2::element_text(face = "bold", color = "black", vjust = -0.3),
axis.title.y = ggplot2::element_text(face = "bold", color = "black"),
strip.text.x = ggplot2::element_text(face = "bold", color = "black"),
strip.text.y = ggplot2::element_text(face = "bold", color = "black"),
plot.title = ggplot2::element_text(face = "bold", vjust = 1),
legend.position = "none",
panel.background = ggplot2::element_rect(color = "black", size = 1.2)) +
ggplot2::ggtitle(peaks$trait[1]) +
ggplot2::labs(x = "Genotype", y = "Phenotype")
}
pxgplot_fake(drugcross, traitmap) +
theme(plot.title = element_blank(),
panel.grid = element_blank())
runApp()
data()
View(eQTLpeaks)
devtools::install_github("Andersenlab/linkagemapping")
library(linkagemapping)
devtools::install_github("Andersenlab/linkagemapping")
library(linkagemapping)
library(tidyverse)
library(linkagemapping)
data("AllCBfosmids")
data("AllN2fosmids")
cb_fosmids <- findCBfosmids("III", 1, 800000)[[1]] %>%
dplyr::mutate(size = end - start)
n2_fosmids <- findN2fosmids("III", 1, 800000)
cowplot::plot_grid(n2_fosmids, cb_fosmids, nrow = 1, ncol = 2)
cb_fosmids <- findCBfosmids("III", 1, 800000)[[1]]
findCBfosmids("III", 1, 800000)[[1]]
cb_fosmids <- findCBfosmids("III", 1, 800000)
n2_fosmids <- findN2fosmids("III", 1, 800000)
cowplot::plot_grid(n2_fosmids, cb_fosmids, nrow = 1, ncol = 2)
library(tidyverse)
set1 <- readr::read_tsv("~/Dropbox/AndersenLab/LabFolders/Katie/projects/zinc/data/nils/chrIII/divergent/fosmid/processed/p01-10.blast",
col_names = c("qseqid", "sseqid", "pident", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore", "qcovs", "qcovhsp", "qlen", "slen", "length"))
set2 <- readr::read_tsv("~/Dropbox/AndersenLab/LabFolders/Katie/projects/zinc/data/nils/chrIII/divergent/fosmid/processed/p11-20.blast",
col_names = c("qseqid", "sseqid", "pident", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore", "qcovs", "qcovhsp", "qlen", "slen", "length"))
set3 <- readr::read_tsv("~/Dropbox/AndersenLab/LabFolders/Katie/projects/zinc/data/nils/chrIII/divergent/fosmid/processed/p21-30.blast",
col_names = c("qseqid", "sseqid", "pident", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore", "qcovs", "qcovhsp", "qlen", "slen", "length"))
set4 <- readr::read_tsv("~/Dropbox/AndersenLab/LabFolders/Katie/projects/zinc/data/nils/chrIII/divergent/fosmid/processed/p31-40.blast",
col_names = c("qseqid", "sseqid", "pident", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore", "qcovs", "qcovhsp", "qlen", "slen", "length"))
allsamples <- set1 %>%
dplyr::bind_rows(set2, set3, set4) %>%
dplyr::mutate(well = stringr::str_split_fixed(qseqid, "_", 2)[,2],
plate = stringr::str_split_fixed(qseqid, "\\.", 2)[,1],
plate = stringr::str_split_fixed(plate, "WRMHS", 2)[,2],
dir = stringr::str_split_fixed(qseqid, "_", 2)[,1],
dir = stringr::str_split_fixed(dir, "\\.", 2)[,2])
summary(allsamples$pident)
# keep high pid
# take the highest pid if there are multiple per blast
# filter out small lengths (< 250) for either query or sample
# filter samples that only have 1 hit -- not helpful
pid <- allsamples %>%
dplyr::mutate(sseqid = dplyr::case_when(sseqid == "CB4856.CP038187.1" ~ "I",
sseqid == "CB4856.CP038188.1" ~ "II",
sseqid == "CB4856.CP038189.1" ~ "III",
sseqid == "CB4856.CP038190.1" ~ "IV",
sseqid == "CB4856.CP038191.1" ~ "V",
sseqid == "CB4856.CP038192.1" ~ "X",
sseqid == "CB4856.CP038193.1" ~ "MtDNA",
TRUE ~ "NA")) %>%
dplyr::filter(pident > 80, # chosen by random
qlen >= 250,
length >= 250) %>% # chosen by random
# dplyr::filter(plate == "35", well == "L03") %>% # chosen by random
dplyr::group_by(qseqid) %>%
dplyr::arrange(desc(pident)) %>%
dplyr::filter(row_number() == 1) %>%
dplyr::group_by(plate, well) %>%
dplyr::mutate(num_hits = n()) %>%
dplyr::filter(num_hits == 2)
# convert to wide data
# CR and CR.1 are now "reverse" and C21 etc. are "forward
wide <- pid %>%
dplyr::select(sample = qseqid, chr = sseqid, start = sstart, end = send, well, plate, dir) %>%
dplyr::ungroup() %>%
dplyr::mutate(dir = ifelse(grepl("R", dir), "reverse", "forward"),
plate = as.numeric(plate)) %>%
dplyr::arrange(plate, well, dir)
# not very clean and can probably be done with tidyr?
forward <- wide %>%
dplyr::filter(dir == "forward") %>%
dplyr::rename(fstart = start, fend = end) %>%
dplyr::select(-dir)
reverse <- wide %>%
dplyr::filter(dir == "reverse") %>%
dplyr::rename(rstart = start, rend = end)  %>%
dplyr::select(-dir)
# make sure both reads map to the same chromosome
test <- wide %>%
dplyr::select(sample, chr, plate, well, dir) %>%
tidyr::spread(dir, sample) %>%
na.omit()
# find the overall length of fosmids
cbfosmids_kt <- test %>%
dplyr::left_join(forward, by = c("chr", "plate", "well", c("forward" = "sample"))) %>%
dplyr::left_join(reverse, by = c("chr", "plate", "well", c("reverse" = "sample"))) %>%
dplyr::rowwise() %>%
dplyr::mutate(fmin = min(fstart, fend, rstart, rend),
fmax = max(fstart, fend, rstart, rend),
length = fmax - fmin) %>%
dplyr::filter(length > 15000, length < 51000) %>%
dplyr::select(chr, plate, well, forward, reverse, start = fmin, end = fmax, length) %>%
dplyr::mutate(id = paste0("WRMHS", plate, well))
View(cbfosmids_kt)
# check with old mapping - p3 I06 matches! coordinates are a little different
library(linkagemapping)
data("AllCBfosmids")
View(AllCBfosmids)
View(cbfosmids_kt)
AllCBfosmids_pacbio <- cbfosmids_kt
save(AllCBfosmids_pacbio, file = "~/Dropbox/AndersenLab/LabFolders/Katie/git/linkagemapping/data/AllCBfosmids_pacbio.rda")
View(AllCBfosmids_pacbio)
runApp()
library('R.utils')
runApp()
query_vcf
# mediation abamectin
load("~/Dropbox/AndersenLab/RCode/Linkage mapping/RIAILsMappings/set1_20190612/data/abamectin-GWER.proximal.annotated.Rda")
View(annotatedmap)
traits <- annotatedmap %>%
dplyr::filter(grepl("mean.TOF|mean.EXT|mean.norm.EXT|norm.n", trait))
traits <- annotatedmap %>%
dplyr::filter(grepl("mean.TOF|mean.EXT|mean.norm.EXT|norm.n", trait)) %>%
na.omit()
traits <- annotatedmap %>%
dplyr::filter(trait %in% c("abamectin.mean.TOF", "abamectin.mean.EXT", "abamectin.mean.norm.EXT", "abamectin.norm.n")) %>%
na.omit()
traits <- annotatedmap %>%
dplyr::filter(trait %in% c("abamectin.mean.TOF", "abamectin.mean.EXT", "abamectin.mean.norm.EXT", "abamectin.norm.n"))
View(traits)
tmp_file <- tempfile()
fst_url <- glue::glue("https://raw.githubusercontent.com/katiesevans/LM-shiny/main/drug_data/abamectin-GWER.chromosomal.annotated.fst")
curl::curl_download(fst_url, tmp_file, mode="wb")
annotatedmap <- fst::read_fst(tmp_file)
peaks <- annotatedmap %>%
dplyr::filter(trait %in% c("abamectin.mean.TOF", "abamectin.mean.EXT", "abamectin.mean.norm.EXT", "abamectin.norm.n")) %>%
na.omit()
View(peaks)
peaks <- annotatedmap %>%
dplyr::filter(trait %in% c("abamectin.mean.TOF", "abamectin.mean.EXT", "abamectin.mean.norm.EXT", "abamectin.norm.n")) %>%
na.omit() %>%
dplyr::filter(set == 1)
load("~/Dropbox/AndersenLab/LabFolders/Katie/git/linkagemapping/data/eQTLpheno.Rda")
load("~/Dropbox/AndersenLab/LabFolders/Katie/projects/zinc/manuscript/data/processed/FileS3_riailpheno.Rda")
set1 <- riailpheno %>%
dplyr::filter(set == 1,
trait == "median.EXT")
phenodf <- riailpheno %>%
dplyr::filter(set == 1,
trait == "median.EXT")
linkagemapping::load_cross_obj("N2xCB4856cross_full")
peak <- "III_118992"
probe <- "A_12_P104472"
load("~/Dropbox/AndersenLab/LabFolders/Katie/projects/zinc/manuscript/data/processed/FileS3_riailpheno.Rda")
phenodf <- riailpheno %>%
dplyr::filter(set == 1,
trait == "median.EXT")
linkagemapping::load_cross_obj("N2xCB4856cross_full")
cross <- N2xCB4856cross_full2
scaled <- T
lm <- FALSE
# load data
data("eqtlpheno")
# get the genotype at the peak marker
newpeak <- gsub(":", "_", peak)
chrom <- stringr::str_split_fixed(newpeak, "_", 2)[,1]
geno <- data.frame(cross$geno[[chrom]]$data)[,newpeak]
strains <- cross$pheno
geno <- cbind(strains, geno)
# get the expression pheno for that probe
probepheno <- eqtlpheno %>%
dplyr::filter(trait == probe) %>%
dplyr::select(strain, expression = phenotype)
View(eqtlpheno)
expression_probe <- "A_12_P104472"
# get the expression pheno for that probe
probepheno <- eqtlpheno %>%
dplyr::filter(expression_probe == probe) %>%
dplyr::select(strain, expression)
probepheno <- probepheno %>%
dplyr::mutate(newpheno = (expression - mean(expression, na.rm = T)) / sd(expression, na.rm = T)) %>%
dplyr::select(strain, expression = newpheno)
phenodf <- riailpheno %>%
dplyr::filter(set == 1,
trait == "median.EXT") %>%
dplyr::mutate(newpheno = (phenotype - mean(phenotype, na.rm = T)) / sd(phenotype, na.rm = T)) %>%
dplyr::select(strain, phenotype = newpheno)
# merge drug phenotype and expression phenotype
pheno <- phenodf %>%
dplyr::left_join(probepheno, by = "strain") %>%
dplyr::left_join(geno, by = "strain") %>%
na.omit()
model.m <- lm(expression ~ geno, data = pheno)
model.y <- lm(phenotype ~ expression + geno, data = pheno)
out <- mediation::mediate(model.m, model.y, sims = 1000, boot = T, treat = "geno", mediator = "expression")
test <- summarize_model(out)
# function to get the summary statistics from model
summarize_model <- function(model) {
# causal mediation effect
acme <- data.frame(var = "ACME",
estimate = model$d0,
ci_lower = model$d0.ci[[1]],
ci_upper = model$d0.ci[[2]],
prob = model$d0.p)
# direct effect
ade <- data.frame(var = "ADE",
estimate = model$z0,
ci_lower = model$z0.ci[[1]],
ci_upper = model$z0.ci[[2]],
prob = model$z0.p)
# total effect
total <- data.frame(var = "total",
estimate = model$tau.coef,
ci_lower = model$tau.ci[[1]],
ci_upper = model$tau.ci[[2]],
prob = model$tau.p)
# prop. mediated
med <- data.frame(var = "MED",
estimate = model$n0,
ci_lower = model$n0.ci[[1]],
ci_upper = model$n0.ci[[2]],
prob = model$n0.p)
# make a dataframe
df <- rbind(acme, ade, total, med)
return(df)
}
test <- summarize_model(out)
out <- mediation::mediate(model.m, model.y, sims = 1000, boot = T, treat = "geno", mediator = "expression")
# causal mediation effect
acme <- data.frame(var = "ACME",
estimate = out$d0,
ci_lower = out$d0.ci[[1]],
ci_upper = out$d0.ci[[2]],
prob = out$d0.p)
# direct effect
ade <- data.frame(var = "ADE",
estimate = out$z0,
ci_lower = out$z0.ci[[1]],
ci_upper = out$z0.ci[[2]],
prob = out$z0.p)
# total effect
total <- data.frame(var = "total",
estimate = out$tau.coef,
ci_lower = out$tau.ci[[1]],
ci_upper = out$tau.ci[[2]],
prob = out$tau.p)
# prop. mediated
med <- data.frame(var = "MED",
estimate = out$n0,
ci_lower = out$n0.ci[[1]],
ci_upper = out$n0.ci[[2]],
prob = out$n0.p)
# make a dataframe
df <- rbind(acme, ade, total, med)
View(df)
unique(pheno$phenotype)
View(phenodf)
phenodf <- riailpheno %>%
dplyr::filter(set == 1,
trait == "median.EXT") %>%
dplyr::mutate(newpheno = (phenotype - mean(phenotype, na.rm = T)) / sd(phenotype, na.rm = T)) %>%
dplyr::select(strain, trait, phenotype = newpheno)
# make a dataframe
df <- rbind(acme, ade, total, med) %>%
dplyr::mutate(var = dplyr::case_when(var == "ADE" ~ "direct",
var == "MED" ~ "prop_med",
var == "ACME" ~ "med",
var == "total" ~ "total",
TRUE ~ "NA"),
trait = unique(phenodf$trait),
probe = expression_probe)
calc_mediation <- function(peak, expression_probe, phenodf, cross, scaled = T, lm = FALSE) {
# load data
data("eqtlpheno")
# get the genotype at the peak marker
newpeak <- gsub(":", "_", peak)
chrom <- stringr::str_split_fixed(newpeak, "_", 2)[,1]
geno <- data.frame(cross$geno[[chrom]]$data)[,newpeak]
strains <- cross$pheno
geno <- cbind(strains, geno)
# get the expression pheno for that probe
probepheno <- eqtlpheno %>%
dplyr::filter(expression_probe == probe) %>%
dplyr::select(strain, expression)
# if scaled = T, scale the phenotype (mean = 0, var = 1)
if(scaled == T) {
probepheno <- probepheno %>%
dplyr::mutate(newpheno = (expression - mean(expression, na.rm = T)) / sd(expression, na.rm = T)) %>%
dplyr::select(strain, expression = newpheno)
}
# merge drug phenotype and expression phenotype
pheno <- phenodf %>%
dplyr::left_join(probepheno, by = "strain") %>%
dplyr::left_join(geno, by = "strain") %>%
na.omit()
if(lm) {
### LINEAR MODELS ###
# total effect = geno estimate
model.g <- lm(phenotype ~ geno, data = pheno)
total <- data.frame(var = "total",
estimate = summary(model.g)$coef[2,1],
pval = summary(model.g)$coef[2,4])
# direct effect = geno estimate
model.y <- lm(phenotype ~ expression + geno, data = pheno)
direct <- data.frame(var = "direct",
estimate = summary(model.y)$coef[3,1],
pval = summary(model.y)$coef[3,4])
# mediation effect = expression estimate
med <- data.frame(var = "med",
estimate = summary(model.y)$coef[2,1],
pval = summary(model.y)$coef[2,4])
# mediation proportion = total - direct / total
out <- rbind(total, direct, med)
} else {
model.m <- lm(expression ~ geno, data = pheno)
model.y <- lm(phenotype ~ expression + geno, data = pheno)
out <- mediation::mediate(model.m, model.y, sims = 1000, boot = T, treat = "geno", mediator = "expression")
# Summarize model into data frame
# causal mediation effect
acme <- data.frame(var = "ACME",
estimate = out$d0,
ci_lower = out$d0.ci[[1]],
ci_upper = out$d0.ci[[2]],
prob = out$d0.p)
# direct effect
ade <- data.frame(var = "ADE",
estimate = out$z0,
ci_lower = out$z0.ci[[1]],
ci_upper = out$z0.ci[[2]],
prob = out$z0.p)
# total effect
total <- data.frame(var = "total",
estimate = out$tau.coef,
ci_lower = out$tau.ci[[1]],
ci_upper = out$tau.ci[[2]],
prob = out$tau.p)
# prop. mediated
med <- data.frame(var = "MED",
estimate = out$n0,
ci_lower = out$n0.ci[[1]],
ci_upper = out$n0.ci[[2]],
prob = out$n0.p)
# make a dataframe
df <- rbind(acme, ade, total, med) %>%
dplyr::mutate(var = dplyr::case_when(var == "ADE" ~ "direct",
var == "MED" ~ "prop_med",
var == "ACME" ~ "med",
var == "total" ~ "total",
TRUE ~ "NA"),
trait = unique(phenodf$trait),
probe = expression_probe)
}
return(df)
}
# total effect = geno estimate
model.g <- lm(phenotype ~ geno, data = pheno)
total <- data.frame(var = "total",
estimate = summary(model.g)$coef[2,1],
pval = summary(model.g)$coef[2,4])
# direct effect = geno estimate
model.y <- lm(phenotype ~ expression + geno, data = pheno)
direct <- data.frame(var = "direct",
estimate = summary(model.y)$coef[3,1],
pval = summary(model.y)$coef[3,4])
# mediation effect = expression estimate
med <- data.frame(var = "med",
estimate = summary(model.y)$coef[2,1],
pval = summary(model.y)$coef[2,4])
# mediation proportion = total - direct / total
out <- rbind(total, direct, med)
View(out)
calc_mediation <- function(peak, expression_probe, phenodf, cross, scaled = T, lm = FALSE) {
# load data
data("eqtlpheno")
# get the genotype at the peak marker
newpeak <- gsub(":", "_", peak)
chrom <- stringr::str_split_fixed(newpeak, "_", 2)[,1]
geno <- data.frame(cross$geno[[chrom]]$data)[,newpeak]
strains <- cross$pheno
geno <- cbind(strains, geno)
# get the expression pheno for that probe
probepheno <- eqtlpheno %>%
dplyr::filter(expression_probe == probe) %>%
dplyr::select(strain, expression)
# if scaled = T, scale the phenotype (mean = 0, var = 1)
if(scaled == T) {
probepheno <- probepheno %>%
dplyr::mutate(newpheno = (expression - mean(expression, na.rm = T)) / sd(expression, na.rm = T)) %>%
dplyr::select(strain, expression = newpheno)
}
# merge drug phenotype and expression phenotype
pheno <- phenodf %>%
dplyr::left_join(probepheno, by = "strain") %>%
dplyr::left_join(geno, by = "strain") %>%
na.omit()
if(lm) {
### LINEAR MODELS ###
# total effect = geno estimate
model.g <- lm(phenotype ~ geno, data = pheno)
total <- data.frame(var = "total",
estimate = summary(model.g)$coef[2,1],
pval = summary(model.g)$coef[2,4])
# direct effect = geno estimate
model.y <- lm(phenotype ~ expression + geno, data = pheno)
direct <- data.frame(var = "direct",
estimate = summary(model.y)$coef[3,1],
pval = summary(model.y)$coef[3,4])
# mediation effect = expression estimate
med <- data.frame(var = "med",
estimate = summary(model.y)$coef[2,1],
pval = summary(model.y)$coef[2,4])
# mediation proportion = total - direct / total
out <- rbind(total, direct, med)
} else {
model.m <- lm(expression ~ geno, data = pheno)
model.y <- lm(phenotype ~ expression + geno, data = pheno)
out <- mediation::mediate(model.m, model.y, sims = 1000, boot = T, treat = "geno", mediator = "expression")
# Summarize model into data frame
# causal mediation effect
acme <- data.frame(var = "ACME",
estimate = out$d0,
ci_lower = out$d0.ci[[1]],
ci_upper = out$d0.ci[[2]],
prob = out$d0.p)
# direct effect
ade <- data.frame(var = "ADE",
estimate = out$z0,
ci_lower = out$z0.ci[[1]],
ci_upper = out$z0.ci[[2]],
prob = out$z0.p)
# total effect
total <- data.frame(var = "total",
estimate = out$tau.coef,
ci_lower = out$tau.ci[[1]],
ci_upper = out$tau.ci[[2]],
prob = out$tau.p)
# prop. mediated
med <- data.frame(var = "MED",
estimate = out$n0,
ci_lower = out$n0.ci[[1]],
ci_upper = out$n0.ci[[2]],
prob = out$n0.p)
# make a dataframe
df <- rbind(acme, ade, total, med) %>%
dplyr::mutate(var = dplyr::case_when(var == "ADE" ~ "direct",
var == "MED" ~ "prop_med",
var == "ACME" ~ "med",
var == "total" ~ "total",
TRUE ~ "NA"),
trait = unique(phenodf$trait),
probe = expression_probe)
}
return(df)
}
p <- riailpheno %>%
dplyr::filter(set == 1,
trait == "median.EXT") %>%
dplyr::mutate(newpheno = (phenotype - mean(phenotype, na.rm = T)) / sd(phenotype, na.rm = T)) %>%
dplyr::select(strain, trait, phenotype = newpheno)
test <- calc_mediation("III_118992", "A_12_P104472", p, N2xCB4856cross_full2)
head(eqtlpheno)
devtools::install_github("AndersenLab/linkagemapping")
library(linkagemapping)
peak <- "III_118992"
expression_probe <- "A_12_P104472"
load("~/Dropbox/AndersenLab/LabFolders/Katie/projects/zinc/manuscript/data/processed/FileS3_riailpheno.Rda")
p <- riailpheno %>%
dplyr::filter(set == 1,
trait == "median.EXT") %>%
dplyr::mutate(newpheno = (phenotype - mean(phenotype, na.rm = T)) / sd(phenotype, na.rm = T)) %>%
dplyr::select(strain, trait, phenotype = newpheno)
linkagemapping::load_cross_obj("N2xCB4856cross_full")
cross <- N2xCB4856cross_full2
test <- linkagemapping::calc_mediation("III_118992", "A_12_P104472", p, N2xCB4856cross_full2)
